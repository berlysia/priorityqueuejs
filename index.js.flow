// @flow

declare module "priorityqueue" {
  declare class PriorityQueue<T> {
    static from(array: T[], option?: PriorityQueueOption<T>): PriorityQueue<T>;
    constructor(option?: PriorityQueueOption<T>): this;
    clear(): void;
    toArray(): Array<T>;
    get length(): number;
    push(value: T): void;
    enqueue(value: T): void;
    top(): T;
    peek(): T;
    pop(): T;
    dequeue(): T;
    merge(other: PriorityQueue<T>): void;
    isEmpty(): boolean;
  }

  declare type PriorityQueueOption<T> = {
    comparator?: Comparator<T>,
  };

  declare type Comparator<T> = {
    (a: T, b: T): number,
  };

  declare export class BinaryHeap<T> extends PriorityQueue<T> {}
  declare export default typeof BinaryHeap
  declare export class SkewHeap<T> extends PriorityQueue<T> {}
  declare export class PairingHeap<T> extends PriorityQueue<T> {}
}
